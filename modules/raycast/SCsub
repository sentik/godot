#!/usr/bin/env python

Import("env")
Import("env_modules")

env_raycast = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

if env["builtin_embree"]:
    thirdparty_dir = "#thirdparty/embree/"

    env_raycast.Append(CPPPATH=[thirdparty_dir + "include"])
    env.Append(LIBPATH=[thirdparty_dir + "lib"])
    env.Append(LINKFLAGS=["embree3.lib", "tbb.lib", "psapi.lib"])
    env_raycast.Append(CPPDEFINES=["EMBREE_TARGET_AVX", "EMBREE_TARGET_AVX2", "EMBREE_TARGET_SSE42", "EMBREE_TARGET_SSE2", "EMBREE_LOWEST_ISA", "TASKING_INTERNAL"])
    env_raycast.AppendUnique(CPPDEFINES=["NDEBUG"])  # No assert() even in debug builds.

    if not env.msvc:
        if env["arch"] in ["x86_64", "x86_32"]:
            env_raycast.Append(CCFLAGS=["-msse2", "-mxsave"])

        if env["platform"] == "windows":
            env_raycast.Append(CCFLAGS=["-mstackrealign"])

    if env["platform"] == "windows":
        if env.msvc:
            env.Append(LINKFLAGS=["psapi.lib"])
        else:
            env.Append(LIBS=["psapi"])

    if env.msvc:  # Disable bogus warning about intentional struct padding.
        env_raycast.Append(CCFLAGS=["/wd4324"])

    env_thirdparty = env_raycast.Clone()
    env_thirdparty.force_optimization_on_debug()
    env_thirdparty.disable_warnings()

    if env["arch"] != "x86_64" or env.msvc:
        # Embree needs those, it will automatically use SSE2NEON in ARM
        env_thirdparty.Append(CPPDEFINES=["__SSE2__", "__SSE__"])

    if env["platform"] == "web":
        env_thirdparty.Append(CXXFLAGS=["-msimd128"])

    if not env.msvc:
        # Flags synced with upstream gnu.cmake.
        if env["arch"] == "arm64" and env["platform"] == "linuxbsd" and not env["use_llvm"]:
            env_thirdparty.Append(CXXFLAGS=["-flax-vector-conversions"])

        env_thirdparty.Append(
            CXXFLAGS=[
                "-fno-strict-overflow",
                "-fno-delete-null-pointer-checks",
                "-fwrapv",
                "-fsigned-char",
                "-fno-strict-aliasing",
                "-fno-tree-vectorize",
                "-fvisibility=hidden",
                "-fvisibility-inlines-hidden",
            ]
        )

    env.modules_sources += thirdparty_obj


# Godot source files

module_obj = []

env_raycast.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
